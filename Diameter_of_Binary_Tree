/*
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameter(TreeNode* root, int *height)
    {
        int lh,rh;
        lh = 0;
        rh = 0;
        int ldiameter = 0;
        int rdiameter = 0;
        
        if(root == NULL)
        {
            *height = 0;
            return 0;
        }
        ldiameter = diameter(root->left, &lh);
        rdiameter = diameter(root->right, &rh);
        
        *height = max(lh,rh) + 1;
        
        return max(lh + rh, max(ldiameter,rdiameter)); 
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int height = 0;
        return diameter(root,&height);
    }
};
